[{"name": "app.py", "content": "from shiny import reactive, render\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly, render_widget\nfrom scipy import stats\nfrom faicons import icon_svg\nfrom ipyleaflet import Map\n\n# SET UP THE REACIVE CONTENT withupdate interval\nUPDATE_INTERVAL_SECS: int = 5\n\n#initialize a reactive value with a common data structure to store state (information)\nDEQUE_SIZE: int = 10\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# Initialize a REACTIVE CALC that our display components can call\n    # The calculation is invalidated every UPDATE_INTERVAL_SECS to trigger updates.\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n    \n    # Data generation logic. Get random temps, rounded to 1 decimal place\n    temp = round(random.uniform(44, 51), 1)\n    # Get a timestamp for \"now\" and use string format strftime() method to format it\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n    # For Display: Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n    # For Display: Get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry    \n    # Return a tuple with everything we need\n    # Every time we call this function, we'll get all these values\n    return deque_snapshot, df, latest_dictionary_entry\n\n\n# Define the Shiny UI Page layout - Page Options\n    # Set title to a string in quotes that will appear at the top\n    # Set fillable to True to use the whole page width for the UI\nui.page_opts(title=\"Laura's PyShiny Express: Live Data Example\", fillable=True)\n\n# Define the Shiny UI Page layout - Sidebar\nwith ui.sidebar(open=\"open\", style=\"background-color:honeydew\"):\n    ui.h2(\"Milwaukee, Wisconsin Weather\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Milwaukee, WI.\",\n        class_=\"text-center\",\n    )\n\n    @render_widget\n    def map(width=\"100%\", height=\"100%\"):\n        return Map(center=(43.044040,-87.906498), zoom=11)\n\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/lauravos/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"https://lauravos.github.io/cintel-05-cintel/\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"hhttps://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n\n    \n    \n# In Shiny Express, everything not in the sidebar is in the main panel\nui.h2(\"Current Conditions in Milwaukee\")\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"cow\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['temp']} F\"\n\n        \"windy conditons\"\n\n\n    with ui.card(full_screen=True, style=\"background-color: azure\"):\n        ui.card_header(\"Current Date and Time\", style=\"background-color: lightsteelblue\")\n\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['timestamp']}\"\n\n#with ui.card(full_screen=True, min_height=\"40%\"):\nwith ui.card(full_screen=True, style=\"background-color: azure\"):\n    ui.card_header(\"Most Recent Readings\", style=\"background-color: lightsteelblue\")\n\n    @render.data_frame\n    def display_df():\n        \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n        pd.set_option('display.width', None)        # Use maximum width\n        return render.DataGrid( df,width=\"100%\")\n\nwith ui.card(style=\"background-color:honeydew\"):\n    ui.card_header(\"Chart with Current Trend\", style=\"background-color: lightsteelblue\")\n\n    @render_plotly\n    def display_plot():\n        # Fetch from the reactive calc function\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n        # Ensure the DataFrame is not empty before plotting\n        if not df.empty:\n            # Convert the 'timestamp' column to datetime for better plotting\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n            # Create scatter plot for readings\n            # pass in the df, the name of the x column, the name of the y column, and more\n        \n            fig = px.scatter(df,\n            x=\"timestamp\",\n            y=\"temp\",\n            title=\"Temperature Readings with Regression Line\",\n            labels={\"temp (F)\": \"Temperature (\u00c2\u00b0F)\", \"timestamp\": \"Time\"},\n            color_discrete_sequence=[\"blue\"] )\n            \n            # Linear regression - we need to get a list of the\n            # Independent variable x values (time) and the\n            # Dependent variable y values (temp)\n            # then, it's pretty easy using scipy.stats.linregress()\n\n            # For x let's generate a sequence of integers from 0 to len(df)\n            sequence = range(len(df))\n            x_vals = list(sequence)\n            y_vals = df[\"temp\"]\n\n            slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n            df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n            # Add the regression line to the figure\n            fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line')\n\n            # Update layout as needed to customize further\n            fig.update_layout(xaxis_title=\"Time\",yaxis_title=\"Temperature (\u00c2\u00b0F)\")\n\n            return fig\n\n\n", "type": "text"}]
